import React, {useEffect} from "react";
import "./CSS/addcust.css";
import "flowbite";
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { getMe } from '../features/authSlice';

const AddCustomer = () => {
  const dispatches = useDispatch();
  const navigate = useNavigate();
  const {isError, user} = useSelector((state => state.auth));

  useEffect(()=>{
    dispatches(getMe());
  }, [dispatches]);

  useEffect(()=>{
    if(isError){
      navigate("/")
    }
    // && user.role !== "admin"
    if(user && user.role !== "dispatch" && user.role !== "admin"){
      navigate("/dispatch");
    }
  }, [isError,user, navigate]);
  return (
    <>
      {/* Customer Form */}
      <div className="hero-body">
        <div className="container">
          <div className="columns is-centered">
            <div className="column is-6">
              <form
                className="p-8 rounded-s-md"
                style={{ backgroundColor: "#CAFFF0" }}
              >
                {/* {isError && <p className='has-text-centered'>{message}</p>} */}
                <h2 className="text-center m-5 text-header-add">
                  Add New Customer
                </h2>

                <div class="relative mb-4">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                  <i class="fi fi-rs-user-pen"></i>
                  </div>
                  <input
                    type="text"
                    id="input-group-1"
                    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black block w-full pl-10 p-2.5  dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-black"
                    placeholder="Enter Customer Name"
                  />
                </div>

                <div class="relative mb-4">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                  <i class="fi fi-bs-building"></i>
                  </div>
                  <input
                    type="text"
                    id="input-group-1"
                    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black block w-full pl-10 p-2.5    dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-black"
                    placeholder="Enter Company Name"
                  />
                </div>

                <div class="relative mb-4">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                  <i class="fi fi-br-marker"></i>
                  </div>
                  <input
                    type="text"
                    id="input-group-1"
                    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black block w-full pl-10 p-2.5    dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-black"
                    placeholder="Address"
                  />
                </div>

                <div class="relative mb-4">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                  <i class="fi fi-br-square-9"></i>
                  </div>
                  <input
                    type="text"
                    id="input-group-1"
                    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black block w-full pl-10 p-2.5    dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-black"
                    placeholder="Enter Company GST No"
                  />
                </div>

                <div class="relative mb-4">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                  <i class="fi fi-rr-address-book"></i>
                  </div>
                  <input
                    type="text"
                    id="input-group-1"
                    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black block w-full pl-10 p-2.5    dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-black"
                    placeholder="Enter Company Contact No"
                  />
                </div>

                <div className="field">
                  <button
                    type="submit"
                    className="button is-success is-fullwidth"
                  >
                    Add
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Database in table format for user */}
      <table className="table is-striped is-fullwidth mt-5">
        <thead>
          <tr>
            <th>Sr.No</th>
            <th>Company Name</th>
            <th>GST No</th>
            <th>Contact No</th>
            <th>Created By</th>
            <th>Created At</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </tbody>
      </table>
    </>
  );
};

export default AddCustomer;











import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { getMe } from '../features/authSlice';
import axios from 'axios';

const schema = yup.object().shape({
  cust_name: yup.string().required('Customer Name is required'),
  comp_name: yup.string().required('Company Name is required'),
  comp_add: yup.string().required('Company Address is required'),
  gstn_number: yup
    .string()
    .required('GST Number is required')
    .matches(/^[A-Z0-9]{15}$/, 'Invalid GST Number'),
  cont_num: yup
    .string()
    .required('Contact Number is required')
    .matches(/^\+?[0-9]{10,15}$/, 'Invalid Contact Number'),
});

const Production = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { isError, user } = useSelector((state) => state.auth);

  const [customers, setCustomers] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    dispatch(getMe());
  }, [dispatch]);

  useEffect(() => {
    if (isError) {
      navigate('/');
    }
    if (user && user.role !== 'dispatch' && user.role !== 'admin') {
      navigate('/dashboard');
    }
  }, [isError, user, navigate]);

  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:5000/customers');
      setCustomers(response.data);
      setIsLoaded(true);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const {
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
  });

  const handleDeleteCustomer = async (customer) => {
    try {
      await axios.delete(`http://localhost:5000/customers/${customer.uuid}`);
      setIsLoaded(false);
      fetchData(); // Fetch updated data after deleting the customer
    } catch (error) {
      console.log(error);
    }
  };

  
  const handleEditCustomer = (customer) => {
    // Set the form values with the selected customer data
    reset({
      cust_name: customer.cust_name,
      comp_name: customer.comp_name,
      comp_add: customer.comp_add,
      gstn_number: customer.gstn_number,
      cont_num: customer.cont_num,
    });
    
    // You may also store the customer ID in state for further processing
    
    // Scroll to the top of the page or navigate to the form section
    // to show the form with the filled data
  };
  

  const onSubmit = async (data) => {
    try {
      await axios.post('http://localhost:5000/customers', data);
      reset();
      setIsLoaded(false);
      fetchData(); // Fetch updated data after adding a new customer
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      {/* Customer Form */}
      <div className="hero-body">
        <div className="container">
          <div className="columns is-centered">
            <div className="column is-6">
              <form
                className="p-8 rounded-s-md"
                style={{ backgroundColor: '#CAFFF0' }}
                onSubmit={handleSubmit(onSubmit)}
              >
                <h2 className="text-center m-5 text-header-add">
                  Add New Customer
                </h2>

                <div className="field">
                  <div className="control">
                    <label className="label">Customer Name</label>
                    <Controller
                      name="cust_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cust_name ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Customer Name"
                        />
                      )}
                    />
                    {errors.cust_name && (
                      <p className="help is-danger">{errors.cust_name.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Name</label>
                    <Controller
                      name="comp_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_name ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Company Name"
                        />
                      )}
                    />
                    {errors.comp_name && (
                      <p className="help is-danger">{errors.comp_name.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Address</label>
                    <Controller
                      name="comp_add"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_add ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Company Address"
                        />
                      )}
                    />
                    {errors.comp_add && (
                      <p className="help is-danger">{errors.comp_add.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">GST Number</label>
                    <Controller
                      name="gstn_number"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.gstn_number ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter GST Number"
                        />
                      )}
                    />
                    {errors.gstn_number && (
                      <p className="help is-danger">
                        {errors.gstn_number.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Contact Number</label>
                    <Controller
                      name="cont_num"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cont_num ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Contact Number"
                        />
                      )}
                    />
                    {errors.cont_num && (
                      <p className="help is-danger">{errors.cont_num.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <button
                      type="submit"
                      className="button is-success"
                      disabled={!isLoaded}
                    >
                      Add
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Customer List */}
      <div className="container mt-5">
        <table className="table is-striped is-fullwidth">
          <thead>
            <tr>
              <th>Sr.No</th>
              <th>Customer Name</th>
              <th>Company Name</th>
              <th>GST Number</th>
              <th>Contact Number</th>
            </tr>
          </thead>
          <tbody>
            {isLoaded ? (
              customers.map((customer, index) => (
                <tr key={customer.uuid}>
                  <td>{index + 1}</td>
                  <td>{customer.cust_name}</td>
                  <td>{customer.comp_name}</td>
                  <td>{customer.gstn_number}</td>
                  <td>{customer.cont_num}</td>
                  <td>
                    <button
                      onClick={() => handleEditCustomer(customer)}
                      className="edit-button"
                    >
                      <i class="fi fi-rr-edit"></i>
                    </button>
                  </td>
                  <td>
                    <button
                      onClick={() => handleDeleteCustomer(customer)}
                      className="delete-button"
                    >
                      <i class="fi fi-rs-trash"></i>
                    </button>
                  </td>
                </tr>
              ))
              
            ) :(
              <tr>
                <td colSpan="5">Loading...</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default Production;




 <div className="field">
                  <div className="control">
                    <label className="label">Customer Name</label>
                    <Controller
                      name="cust_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cust_name ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Customer Name"
                        />
                      )}
                    />
                    {errors.cust_name && (
                      <p className="help is-danger">{errors.cust_name.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Name</label>
                    <Controller
                      name="comp_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_name ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Company Name"
                        />
                      )}
                    />
                    {errors.comp_name && (
                      <p className="help is-danger">{errors.comp_name.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Address</label>
                    <Controller
                      name="comp_add"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_add ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Company Address"
                        />
                      )}
                    />
                    {errors.comp_add && (
                      <p className="help is-danger">{errors.comp_add.message}</p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">GST Number</label>
                    <Controller
                      name="gstn_number"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.gstn_number ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter GST Number"
                        />
                      )}
                    />
                    {errors.gstn_number && (
                      <p className="help is-danger">
                        {errors.gstn_number.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Contact Number</label>
                    <Controller
                      name="cont_num"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cont_num ? 'is-danger' : ''
                          }`}
                          type="text"
                          placeholder="Enter Contact Number"
                        />
                      )}
                    />
                    {errors.cont_num && (
                      <p className="help is-danger">{errors.cont_num.message}</p>
                    )}
                  </div>
                </div>






















                import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { getMe } from "../features/authSlice";
import axios from "axios";
import { CSVLink } from "react-csv";

const schema = yup.object().shape({
  cust_name: yup.string().required("Customer Name is required"),
  prod_name: yup.string().required("Product Name is required"),
  gradeId: yup.number().required("Grade is required"),
  No_of_casting_in_mould: yup
    .number()
    .typeError("Number of castings must be a valid number")
    .required("Number of castings is required"),
  Casting_Weight: yup
    .number()
    .typeError("Casting weight must be a valid number")
    .required("Casting weight is required"),
});

const AddProductPage = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { isError, user } = useSelector((state) => state.auth);

  const [customers, setCustomers] = useState([]);
  const [grades, setGrades] = useState([]);
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentProductId, setCurrentProductId] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  useEffect(() => {
    dispatch(getMe());
  }, [dispatch]);

  useEffect(() => {
    if (isError) {
      navigate("/");
    }
  }, [isError, navigate]);

  const fetchData = async () => {
    try {
      const response = await axios.get("http://localhost:5000/products");
      const sortedData = response.data.sort((a, b) => {
        return new Date(b.createdAt) - new Date(a.createdAt);
      });
      setProducts(sortedData);
      setIsLoaded(true);
      setFilteredProducts(sortedData);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchData();
    fetchCustomers();
    fetchGrades();
  }, []);

  const {
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
  });

  const fetchCustomers = async () => {
    try {
      const response = await axios.get("http://localhost:5000/customers");
      setCustomers(response.data);
    } catch (error) {
      console.log(error);
    }
  };

  const fetchGrades = async () => {
    try {
      const response = await axios.get("http://localhost:5000/grades");
      setGrades(response.data);
    } catch (error) {
      console.log(error);
    }
  };

  const handleDeleteProduct = async (id) => {
    try {
      const confirmDelete = window.confirm(
        "Are you sure you want to delete this product?"
      );
      if (confirmDelete) {
        await axios.delete(`http://localhost:5000/products/${id}`);
        setIsLoaded(false);
        fetchData();
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleEditProduct = (product) => {
    reset({
      cust_name: product.cust_name,
      prod_name: product.prod_name,
      gradeId: product.gradeId,
      No_of_casting_in_mould: product.No_of_casting_in_mould,
      Casting_Weight: product.Casting_Weight,
    });

    setCurrentProductId(product.id);
    setSelectedCustomer(product.cust_name);

    setIsEditing(true);
  };

  const onSubmit = async (data) => {
    try {
      if (isEditing) {
        const confirmUpdate = window.confirm(
          "Are you sure you want to update this product?"
        );
        if (confirmUpdate) {
          await updateProduct(data);
          setIsEditing(false);
        }
      } else {
        await addProduct(data);
      }

      reset();
      setCurrentProductId("");

      setIsLoaded(false);
      fetchData();
    } catch (error) {
      console.log(error);
    }
  };

  const addProduct = async (data) => {
    try {
      await axios.post("http://localhost:5000/products", data);
    } catch (error) {
      console.log(error);
    }
  };

  const updateProduct = async (data) => {
    try {
      const productId = currentProductId;
      await axios.patch(`http://localhost:5000/products/${productId}`, data);
    } catch (error) {
      console.log(error);
    }
  };

  const handleUpdateProduct = async (data) => {
    try {
      const confirmUpdate = window.confirm(
        "Are you sure you want to update this product?"
      );
      if (confirmUpdate) {
        await updateProduct(data);

        setProducts((prevProducts) =>
          prevProducts.map((product) =>
            product.id === currentProductId ? { ...product, ...data } : product
          )
        );

        reset();
        setIsEditing(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleDateFilter = () => {
    const filteredData = products.filter((product) => {
      const createdAtDate = new Date(product.createdAt);
      return (
        createdAtDate >= new Date(startDate) && createdAtDate <= new Date(endDate)
      );
    });
    setFilteredProducts(filteredData);
  };

  const handleExportCSV = () => {
    const csvData = filteredProducts.map((product) => ({
      "Customer Name": product.cust_name,
      "Product Name": product.prod_name,
      "Grade": product.grade ? product.grade.Grade_Name : "",
      "Number of Castings": product.No_of_casting_in_mould,
      "Casting Weight": product.Casting_Weight,
      "Created At": new Date(product.createdAt).toLocaleDateString(),
    }));

    const headers = [
      { label: "Customer Name", key: "Customer Name" },
      { label: "Product Name", key: "Product Name" },
      { label: "Grade", key: "Grade" },
      { label: "Number of Castings", key: "Number of Castings" },
      { label: "Casting Weight", key: "Casting Weight" },
      { label: "Created At", key: "Created At" },
    ];

    return (
      <div className="export-csv-container">
        <CSVLink
          data={csvData}
          headers={headers}
          filename={"products.csv"}
          className="button is-primary"
        >
          Export as CSV
        </CSVLink>
      </div>
    );
  };

  return (
    <>
      <div className="hero-body">
        <div className="container">
          <div className="columns is-centered">
            <div className="column is-6">
              {/* Product Form */}
              <form
                className="p-8 rounded-s-md"
                style={{ backgroundColor: "#CAFFF0" }}
                onSubmit={handleSubmit(onSubmit)}
              >
                <h2 className="text-center m-5 text-header-add">Add New Product</h2>

                {/* Customer Name */}
                <div className="field">
                  <div className="control">
                    <label className="label">Customer Name</label>
                    <Controller
                      name="cust_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <select
                          {...field}
                          className={`input ${errors.cust_name ? "is-danger" : ""}`}
                        >
                          <option value="">Select Customer</option>
                          {customers.map((customer) => (
                            <option key={customer.id} value={customer.cust_name}>
                              {customer.cust_name}
                            </option>
                          ))}
                        </select>
                      )}
                    />
                    {errors.cust_name && (
                      <p className="help is-danger">{errors.cust_name.message}</p>
                    )}
                  </div>
                </div>

                {/* Product Name */}
                <div className="field">
                  <div className="control">
                    <label className="label">Product Name</label>
                    <Controller
                      name="prod_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${errors.prod_name ? "is-danger" : ""}`}
                          type="text"
                          placeholder="Enter Product Name"
                        />
                      )}
                    />
                    {errors.prod_name && (
                      <p className="help is-danger">{errors.prod_name.message}</p>
                    )}
                  </div>
                </div>

                {/* Grade */}
                <div className="field">
                  <div className="control">
                    <label className="label">Grade</label>
                    <Controller
                      name="gradeId"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <select
                          {...field}
                          className={`input ${errors.gradeId ? "is-danger" : ""}`}
                        >
                          <option value="">Select Grade</option>
                          {grades.map((grade) => (
                            <option key={grade.PK_GradeId} value={grade.PK_GradeId}>
                              {grade.Grade_Name}
                            </option>
                          ))}
                        </select>
                      )}
                    />
                    {errors.gradeId && (
                      <p className="help is-danger">{errors.gradeId.message}</p>
                    )}
                  </div>
                </div>

                {/* Number of Castings */}
                <div className="field">
                  <div className="control">
                    <label className="label">Number of Castings</label>
                    <Controller
                      name="No_of_casting_in_mould"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.No_of_casting_in_mould ? "is-danger" : ""
                          }`}
                          type="number"
                          placeholder="Enter Number of Castings"
                        />
                      )}
                    />
                    {errors.No_of_casting_in_mould && (
                      <p className="help is-danger">
                        {errors.No_of_casting_in_mould.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* Casting Weight */}
                <div className="field">
                  <div className="control">
                    <label className="label">Casting Weight</label>
                    <Controller
                      name="Casting_Weight"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${errors.Casting_Weight ? "is-danger" : ""}`}
                          type="number"
                          placeholder="Enter Casting Weight"
                        />
                      )}
                    />
                    {errors.Casting_Weight && (
                      <p className="help is-danger">{errors.Casting_Weight.message}</p>
                    )}
                  </div>
                </div>

                <center>
                  <div className="field">
                    <div className="control">
                      <button type="submit" className="button is-success">
                        {isEditing ? "Update" : "Add"}
                      </button>
                    </div>
                  </div>
                </center>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Display Table */}
      <div className="container mt-6">
        <h2 className="is-size-4 has-text-weight-bold mb-4">Product List</h2>

        {/* Date Filter */}
        <div className="date-filter-container">
          <div className="field" style={{ padding: "10px" }}>
            <div
              style={{
                display: "flex",
                gap: "10px",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <div className="field">
                <label className="label">Start Date:</label>
                <div className="control">
                  <input
                    type="date"
                    className="input"
                    value={startDate}
                    onChange={(e) => setStartDate(e.target.value)}
                  />
                </div>
              </div>
              <div className="field">
                <label className="label">End Date:</label>
                <div className="control">
                  <input
                    type="date"
                    className="input"
                    value={endDate}
                    onChange={(e) => setEndDate(e.target.value)}
                  />
                </div>
              </div>
              <div className="field">
                <div className="control">
                  <button className="button is-primary" onClick={handleDateFilter}>
                    Filter
                  </button>
                </div>
              </div>
            </div>
            {/* Export CSV Button */}
            {handleExportCSV()}
          </div>
        </div>

        <table className="table is-bordered is-striped is-fullwidth">
          <thead>
            <tr>
              <th>Customer Name</th>
              <th>Product Name</th>
              <th>Grade</th>
              <th>Number of Castings</th>
              <th>Casting Weight</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {isLoaded ? (
              filteredProducts.map((product) => (
                <tr key={product.id}>
                  <td>{product.cust_name}</td>
                  <td>{product.prod_name}</td>
                  <td>{product.grade ? product.grade.Grade_Name : ""}</td>
                  <td>{product.No_of_casting_in_mould}</td>
                  <td>{product.Casting_Weight}</td>
                  <td>
                    <button
                      className="button is-small is-info mr-2"
                      onClick={() => {
                        setCurrentProductId(product.id);
                        setIsEditing(true);
                        setSelectedCustomer(product.cust_name);
                      }}
                    >
                      Edit
                    </button>
                    <button
                      className="button is-small is-danger"
                      onClick={async () => {
                        const confirmDelete = window.confirm(
                          "Are you sure you want to delete this Product?"
                        );
                        if (confirmDelete) {
                          await axios.delete(
                            `http://localhost:5000/products/${product.id}`
                          );
                          setIsLoaded(false);
                          fetchData();
                        }
                      }}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="6">Loading...</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default AddProductPage;
